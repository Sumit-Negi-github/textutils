{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","Textform","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","showAlert","newText","toUpperCase","toLowerCase","arr","split","count","forEach","element","length","no_words","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","darkmodecolor","setDarkModeColor","setTimeout","document","body","toggleModeColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8d281f3b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n// export default function Navbar(props) {\r\n//     const handleOnChange = (event) =>{\r\n//         // console.log(\"On change\");\r\n//         props.toggleModeColor(event.target.value)\r\n//     }\r\n\r\n//     return (\r\n//         <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n//         <div className=\"container-fluid\">\r\n//           <Link className=\"navbar-brand\" to=\"/\"><b>{props.title}</b></Link>\r\n//           <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n//             <span className=\"navbar-toggler-icon\"></span>\r\n//           </button>\r\n//           <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n//             <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n//               <li className=\"nav-item\">\r\n//                 <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n//               </li>\r\n//               <li className=\"nav-item\">\r\n//                 <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n//               </li>\r\n//             </ul>\r\n\r\n//             <form className=\"d-flex\">\r\n//               <input className=\"form-control me-2\" onChange={handleOnChange} type=\"search\" placeholder=\"Darkmode color\" aria-label=\"Search\"/>\r\n//             </form>\r\n            \r\n\r\n//             <div className= {`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >\r\n//             <input className=\"form-check-input\" onClick={props.toggleMode}type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n//             <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n//             </div>\r\n            \r\n//           </div>\r\n//         </div>\r\n//       </nav>\r\n//     )\r\n// }\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  const handleOnChange = (event) =>{\r\n      // console.log(\"On change\");\r\n      props.toggleModeColor(event.target.value)\r\n  }\r\n\r\n  return (\r\n      <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\"><b>{props.title}</b></a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n            </li> */}\r\n          </ul>\r\n\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" onChange={handleOnChange} type=\"search\" placeholder=\"Darkmode color\" aria-label=\"Search\"/>\r\n          </form> */}\r\n          \r\n\r\n          <div className= {`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >\r\n          <input className=\"form-check-input\" onClick={props.toggleMode}type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title : \"TextUtils\",\r\n    aboutText: \"About\"\r\n}","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Textform(props) {\r\n\r\n    const [text,setText] = useState(\"\");\r\n\r\n    const handleUpClick = () =>{\r\n        // console.log(\"Uppercase was clicked\");\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLoClick = () =>{\r\n        // console.log(\"Lowercase was clicked\");\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const no_words = () =>{\r\n        const arr = text.split(' ');\r\n        let count = 0;\r\n        arr.forEach(element => {\r\n            if(element.length >0)\r\n                count += 1;\r\n        });\r\n        return count;\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className= \"container\" style = {{color: props.mode==='light'?'#1a2541':'white'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"my-3\">\r\n            <textarea className=\"form-control\" value = {text} onChange={handleOnChange} style = {{backgroundColor : props.mode ==='dark'?'gray':'white', color: props.mode==='light'?'#1a2541':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n        </div>\r\n        <div className=\"container my-2\" style = {{color: props.mode==='light'?'#1a2541':'white'}}>\r\n            <h2>Text Summary</h2>\r\n            <p>\r\n                {no_words()} words and {text.length} characters\r\n            </p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:'Enter something in the text box to preview here'}</p>\r\n        </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nTextform.propTypes = {\r\n    heading : PropTypes.string\r\n}\r\n\r\nTextform.defaultProps = {\r\n    heading : \"Enter the text to analyze\"\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n            <strong> {capitalize(props.alert.type)} : {props.alert.msg}</strong>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, {useState} from 'react'\nimport Alert from './components/Alert';\nimport About from './components/About';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\n// function App() {\n//   const [mode, setMode] = useState('light');\n//   const [alert, setAlert] = useState(null);\n//   const [darkmodecolor, setDarkModeColor] = useState('');\n\n//   const showAlert = (msg, type) => {\n//     setAlert({\n//       msg: msg,\n//       type: type\n//     })\n\n//     setTimeout(() => {\n//       setAlert(null);\n//     }, 3000);\n//   }\n\n//   const toggleMode = () =>{\n//     if(mode === 'light'){\n//       setMode('dark');\n//       document.body.style.backgroundColor = (darkmodecolor ==='' || darkmodecolor === 'white')?'#252350':darkmodecolor ;\n//       setDarkModeColor((darkmodecolor ==='' || darkmodecolor === 'white')?'#252350':darkmodecolor); \n        \n//       showAlert(\"Dark Mode enabled!\",\"success\");\n//     }\n//     else{\n//       setMode('light');\n\n//       document.body.style.backgroundColor = \"white\";\n//       showAlert(\"Dark Mode disabled!\",\"success\");\n//       // setDarkModeColor('white')\n      \n//     }\n//   }\n\n//   const toggleModeColor=(word)=>{\n//     setDarkModeColor(word);\n//   }\n\n//   return (\n//     <>\n//     <Router>\n//       <Navbar title = \"TextUtils\" aboutText =\"About\" mode = {mode} toggleMode={toggleMode} toggleModeColor={toggleModeColor} />\n//       <Alert alert = {alert}/>\n      \n//       <div className=\"container my-3\">\n//       <Routes>\n\n//         <Route exact path=\"/\" element={<Textform heading=\"Enter the text to analyze\" mode = {mode} showAlert={showAlert} />} />\n\n//         <Route exact path = \"/about\" element={<About />} />\n\n//       </Routes> \n//       </div> \n//     </Router> \n//     </>\n//   );\n// }\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const [darkmodecolor, setDarkModeColor] = useState('');\n\n  const showAlert = (msg, type) => {\n    setAlert({\n      msg: msg,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = (darkmodecolor ==='' || darkmodecolor === 'white')?'#252350':darkmodecolor ;\n      setDarkModeColor((darkmodecolor ==='' || darkmodecolor === 'white')?'#252350':darkmodecolor); \n        \n      showAlert(\"Dark Mode enabled!\",\"success\");\n    }\n    else{\n      setMode('light');\n\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Dark Mode disabled!\",\"success\");\n      // setDarkModeColor('white')\n      \n    }\n  }\n\n  const toggleModeColor=(word)=>{\n    setDarkModeColor(word);\n  }\n\n  return (\n    <>\n      <Navbar title = \"TextUtils\" aboutText =\"About\" mode = {mode} toggleMode={toggleMode} toggleModeColor={toggleModeColor} />\n      <Alert alert = {alert}/>\n      \n      <div className=\"container my-3\">\n\n      <Textform heading=\"Enter the text to analyze\" mode = {mode} showAlert={showAlert} />\n\n      </div> \n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}